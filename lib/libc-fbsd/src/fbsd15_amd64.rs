/* automatically generated by rust-bindgen 0.69.1 */

pub const __GNUCLIKE_ASM: u32 = 3;
pub const __GNUCLIKE___TYPEOF: u32 = 1;
pub const __GNUCLIKE___SECTION: u32 = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING: u32 = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS: u32 = 1;
pub const __GNUCLIKE_BUILTIN_STDARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST: u32 = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY: u32 = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY: u32 = 1;
pub const __CC_SUPPORTS_INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE__: u32 = 1;
pub const __CC_SUPPORTS___FUNC__: u32 = 1;
pub const __CC_SUPPORTS_WARNING: u32 = 1;
pub const __CC_SUPPORTS_VARADIC_XXX: u32 = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT: u32 = 1;
pub const __POSIX_VISIBLE: u32 = 200809;
pub const __XSI_VISIBLE: u32 = 700;
pub const __BSD_VISIBLE: u32 = 1;
pub const __ISO_C_VISIBLE: u32 = 2011;
pub const __EXT1_VISIBLE: u32 = 1;
pub const __CHAR_BIT: u32 = 8;
pub const __SCHAR_MAX: u32 = 127;
pub const __SCHAR_MIN: i32 = -128;
pub const __UCHAR_MAX: u32 = 255;
pub const __USHRT_MAX: u32 = 65535;
pub const __SHRT_MAX: u32 = 32767;
pub const __SHRT_MIN: i32 = -32768;
pub const __UINT_MAX: u32 = 4294967295;
pub const __INT_MAX: u32 = 2147483647;
pub const __INT_MIN: i32 = -2147483648;
pub const __ULONG_MAX: i32 = -1;
pub const __LONG_MAX: u64 = 9223372036854775807;
pub const __LONG_MIN: i64 = -9223372036854775808;
pub const __ULLONG_MAX: i32 = -1;
pub const __LLONG_MAX: u64 = 9223372036854775807;
pub const __LLONG_MIN: i64 = -9223372036854775808;
pub const __SSIZE_MAX: u64 = 9223372036854775807;
pub const __SIZE_T_MAX: i32 = -1;
pub const __OFF_MAX: u64 = 9223372036854775807;
pub const __OFF_MIN: i64 = -9223372036854775808;
pub const __UQUAD_MAX: i32 = -1;
pub const __QUAD_MAX: u64 = 9223372036854775807;
pub const __QUAD_MIN: i64 = -9223372036854775808;
pub const __LONG_BIT: u32 = 64;
pub const __WORD_BIT: u32 = 32;
pub const __MINSIGSTKSZ: u32 = 2048;
pub const __WCHAR_MIN: i32 = -2147483648;
pub const __WCHAR_MAX: u32 = 2147483647;
pub const EVFILT_READ: i32 = -1;
pub const EVFILT_WRITE: i32 = -2;
pub const EVFILT_AIO: i32 = -3;
pub const EVFILT_VNODE: i32 = -4;
pub const EVFILT_PROC: i32 = -5;
pub const EVFILT_SIGNAL: i32 = -6;
pub const EVFILT_TIMER: i32 = -7;
pub const EVFILT_PROCDESC: i32 = -8;
pub const EVFILT_FS: i32 = -9;
pub const EVFILT_LIO: i32 = -10;
pub const EVFILT_USER: i32 = -11;
pub const EVFILT_SENDFILE: i32 = -12;
pub const EVFILT_EMPTY: i32 = -13;
pub const EVFILT_SYSCOUNT: u32 = 13;
pub const EV_ADD: u32 = 1;
pub const EV_DELETE: u32 = 2;
pub const EV_ENABLE: u32 = 4;
pub const EV_DISABLE: u32 = 8;
pub const EV_FORCEONESHOT: u32 = 256;
pub const EV_KEEPUDATA: u32 = 512;
pub const EV_ONESHOT: u32 = 16;
pub const EV_CLEAR: u32 = 32;
pub const EV_RECEIPT: u32 = 64;
pub const EV_DISPATCH: u32 = 128;
pub const EV_SYSFLAGS: u32 = 61440;
pub const EV_DROP: u32 = 4096;
pub const EV_FLAG1: u32 = 8192;
pub const EV_FLAG2: u32 = 16384;
pub const EV_EOF: u32 = 32768;
pub const EV_ERROR: u32 = 16384;
pub const NOTE_FFNOP: u32 = 0;
pub const NOTE_FFAND: u32 = 1073741824;
pub const NOTE_FFOR: u32 = 2147483648;
pub const NOTE_FFCOPY: u32 = 3221225472;
pub const NOTE_FFCTRLMASK: u32 = 3221225472;
pub const NOTE_FFLAGSMASK: u32 = 16777215;
pub const NOTE_TRIGGER: u32 = 16777216;
pub const NOTE_LOWAT: u32 = 1;
pub const NOTE_FILE_POLL: u32 = 2;
pub const NOTE_DELETE: u32 = 1;
pub const NOTE_WRITE: u32 = 2;
pub const NOTE_EXTEND: u32 = 4;
pub const NOTE_ATTRIB: u32 = 8;
pub const NOTE_LINK: u32 = 16;
pub const NOTE_RENAME: u32 = 32;
pub const NOTE_REVOKE: u32 = 64;
pub const NOTE_OPEN: u32 = 128;
pub const NOTE_CLOSE: u32 = 256;
pub const NOTE_CLOSE_WRITE: u32 = 512;
pub const NOTE_READ: u32 = 1024;
pub const NOTE_EXIT: u32 = 2147483648;
pub const NOTE_FORK: u32 = 1073741824;
pub const NOTE_EXEC: u32 = 536870912;
pub const NOTE_PCTRLMASK: u32 = 4026531840;
pub const NOTE_PDATAMASK: u32 = 1048575;
pub const NOTE_TRACK: u32 = 1;
pub const NOTE_TRACKERR: u32 = 2;
pub const NOTE_CHILD: u32 = 4;
pub const NOTE_SECONDS: u32 = 1;
pub const NOTE_MSECONDS: u32 = 2;
pub const NOTE_USECONDS: u32 = 4;
pub const NOTE_NSECONDS: u32 = 8;
pub const NOTE_ABSTIME: u32 = 16;
pub const KQUEUE_CLOEXEC: u32 = 1;
pub const SOCK_STREAM: u32 = 1;
pub const SOCK_DGRAM: u32 = 2;
pub const SOCK_RAW: u32 = 3;
pub const SOCK_RDM: u32 = 4;
pub const SOCK_SEQPACKET: u32 = 5;
pub const SOCK_CLOEXEC: u32 = 268435456;
pub const SOCK_NONBLOCK: u32 = 536870912;
pub const SO_DEBUG: u32 = 1;
pub const SO_ACCEPTCONN: u32 = 2;
pub const SO_REUSEADDR: u32 = 4;
pub const SO_KEEPALIVE: u32 = 8;
pub const SO_DONTROUTE: u32 = 16;
pub const SO_BROADCAST: u32 = 32;
pub const SO_USELOOPBACK: u32 = 64;
pub const SO_LINGER: u32 = 128;
pub const SO_OOBINLINE: u32 = 256;
pub const SO_REUSEPORT: u32 = 512;
pub const SO_TIMESTAMP: u32 = 1024;
pub const SO_NOSIGPIPE: u32 = 2048;
pub const SO_ACCEPTFILTER: u32 = 4096;
pub const SO_BINTIME: u32 = 8192;
pub const SO_NO_OFFLOAD: u32 = 16384;
pub const SO_NO_DDP: u32 = 32768;
pub const SO_REUSEPORT_LB: u32 = 65536;
pub const SO_RERROR: u32 = 131072;
pub const SO_SNDBUF: u32 = 4097;
pub const SO_RCVBUF: u32 = 4098;
pub const SO_SNDLOWAT: u32 = 4099;
pub const SO_RCVLOWAT: u32 = 4100;
pub const SO_SNDTIMEO: u32 = 4101;
pub const SO_RCVTIMEO: u32 = 4102;
pub const SO_ERROR: u32 = 4103;
pub const SO_TYPE: u32 = 4104;
pub const SO_LABEL: u32 = 4105;
pub const SO_PEERLABEL: u32 = 4112;
pub const SO_LISTENQLIMIT: u32 = 4113;
pub const SO_LISTENQLEN: u32 = 4114;
pub const SO_LISTENINCQLEN: u32 = 4115;
pub const SO_SETFIB: u32 = 4116;
pub const SO_USER_COOKIE: u32 = 4117;
pub const SO_PROTOCOL: u32 = 4118;
pub const SO_PROTOTYPE: u32 = 4118;
pub const SO_TS_CLOCK: u32 = 4119;
pub const SO_MAX_PACING_RATE: u32 = 4120;
pub const SO_DOMAIN: u32 = 4121;
pub const SO_TS_REALTIME_MICRO: u32 = 0;
pub const SO_TS_BINTIME: u32 = 1;
pub const SO_TS_REALTIME: u32 = 2;
pub const SO_TS_MONOTONIC: u32 = 3;
pub const SO_TS_DEFAULT: u32 = 0;
pub const SO_TS_CLOCK_MAX: u32 = 3;
pub const SO_VENDOR: u32 = 2147483648;
pub const SOL_SOCKET: u32 = 65535;
pub const AF_UNSPEC: u32 = 0;
pub const AF_UNIX: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_IMPLINK: u32 = 3;
pub const AF_PUP: u32 = 4;
pub const AF_CHAOS: u32 = 5;
pub const AF_NETBIOS: u32 = 6;
pub const AF_ISO: u32 = 7;
pub const AF_OSI: u32 = 7;
pub const AF_ECMA: u32 = 8;
pub const AF_DATAKIT: u32 = 9;
pub const AF_CCITT: u32 = 10;
pub const AF_SNA: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_DLI: u32 = 13;
pub const AF_LAT: u32 = 14;
pub const AF_HYLINK: u32 = 15;
pub const AF_APPLETALK: u32 = 16;
pub const AF_ROUTE: u32 = 17;
pub const AF_LINK: u32 = 18;
pub const pseudo_AF_XTP: u32 = 19;
pub const AF_COIP: u32 = 20;
pub const AF_CNT: u32 = 21;
pub const pseudo_AF_RTIP: u32 = 22;
pub const AF_IPX: u32 = 23;
pub const AF_SIP: u32 = 24;
pub const pseudo_AF_PIP: u32 = 25;
pub const AF_ISDN: u32 = 26;
pub const AF_E164: u32 = 26;
pub const pseudo_AF_KEY: u32 = 27;
pub const AF_INET6: u32 = 28;
pub const AF_NATM: u32 = 29;
pub const AF_ATM: u32 = 30;
pub const pseudo_AF_HDRCMPLT: u32 = 31;
pub const AF_NETGRAPH: u32 = 32;
pub const AF_SLOW: u32 = 33;
pub const AF_SCLUSTER: u32 = 34;
pub const AF_ARP: u32 = 35;
pub const AF_BLUETOOTH: u32 = 36;
pub const AF_IEEE80211: u32 = 37;
pub const AF_NETLINK: u32 = 38;
pub const AF_INET_SDP: u32 = 40;
pub const AF_INET6_SDP: u32 = 42;
pub const AF_HYPERV: u32 = 43;
pub const AF_DIVERT: u32 = 44;
pub const AF_MAX: u32 = 44;
pub const AF_VENDOR00: u32 = 39;
pub const AF_VENDOR01: u32 = 41;
pub const AF_VENDOR03: u32 = 45;
pub const AF_VENDOR04: u32 = 47;
pub const AF_VENDOR05: u32 = 49;
pub const AF_VENDOR06: u32 = 51;
pub const AF_VENDOR07: u32 = 53;
pub const AF_VENDOR08: u32 = 55;
pub const AF_VENDOR09: u32 = 57;
pub const AF_VENDOR10: u32 = 59;
pub const AF_VENDOR11: u32 = 61;
pub const AF_VENDOR12: u32 = 63;
pub const AF_VENDOR13: u32 = 65;
pub const AF_VENDOR14: u32 = 67;
pub const AF_VENDOR15: u32 = 69;
pub const AF_VENDOR16: u32 = 71;
pub const AF_VENDOR17: u32 = 73;
pub const AF_VENDOR18: u32 = 75;
pub const AF_VENDOR19: u32 = 77;
pub const AF_VENDOR20: u32 = 79;
pub const AF_VENDOR21: u32 = 81;
pub const AF_VENDOR22: u32 = 83;
pub const AF_VENDOR23: u32 = 85;
pub const AF_VENDOR24: u32 = 87;
pub const AF_VENDOR25: u32 = 89;
pub const AF_VENDOR26: u32 = 91;
pub const AF_VENDOR27: u32 = 93;
pub const AF_VENDOR28: u32 = 95;
pub const AF_VENDOR29: u32 = 97;
pub const AF_VENDOR30: u32 = 99;
pub const AF_VENDOR31: u32 = 101;
pub const AF_VENDOR32: u32 = 103;
pub const AF_VENDOR33: u32 = 105;
pub const AF_VENDOR34: u32 = 107;
pub const AF_VENDOR35: u32 = 109;
pub const AF_VENDOR36: u32 = 111;
pub const AF_VENDOR37: u32 = 113;
pub const AF_VENDOR38: u32 = 115;
pub const AF_VENDOR39: u32 = 117;
pub const AF_VENDOR40: u32 = 119;
pub const AF_VENDOR41: u32 = 121;
pub const AF_VENDOR42: u32 = 123;
pub const AF_VENDOR43: u32 = 125;
pub const AF_VENDOR44: u32 = 127;
pub const AF_VENDOR45: u32 = 129;
pub const AF_VENDOR46: u32 = 131;
pub const AF_VENDOR47: u32 = 133;
pub const SOCK_MAXADDRLEN: u32 = 255;
pub const _SS_MAXSIZE: u32 = 128;
pub const PF_UNSPEC: u32 = 0;
pub const PF_INET: u32 = 2;
pub const PF_IMPLINK: u32 = 3;
pub const PF_PUP: u32 = 4;
pub const PF_CHAOS: u32 = 5;
pub const PF_NETBIOS: u32 = 6;
pub const PF_ISO: u32 = 7;
pub const PF_OSI: u32 = 7;
pub const PF_ECMA: u32 = 8;
pub const PF_DATAKIT: u32 = 9;
pub const PF_CCITT: u32 = 10;
pub const PF_SNA: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_DLI: u32 = 13;
pub const PF_LAT: u32 = 14;
pub const PF_HYLINK: u32 = 15;
pub const PF_APPLETALK: u32 = 16;
pub const PF_ROUTE: u32 = 17;
pub const PF_LINK: u32 = 18;
pub const PF_XTP: u32 = 19;
pub const PF_COIP: u32 = 20;
pub const PF_CNT: u32 = 21;
pub const PF_SIP: u32 = 24;
pub const PF_IPX: u32 = 23;
pub const PF_RTIP: u32 = 22;
pub const PF_PIP: u32 = 25;
pub const PF_ISDN: u32 = 26;
pub const PF_KEY: u32 = 27;
pub const PF_INET6: u32 = 28;
pub const PF_NATM: u32 = 29;
pub const PF_ATM: u32 = 30;
pub const PF_NETGRAPH: u32 = 32;
pub const PF_SLOW: u32 = 33;
pub const PF_SCLUSTER: u32 = 34;
pub const PF_ARP: u32 = 35;
pub const PF_BLUETOOTH: u32 = 36;
pub const PF_IEEE80211: u32 = 37;
pub const PF_NETLINK: u32 = 38;
pub const PF_INET_SDP: u32 = 40;
pub const PF_INET6_SDP: u32 = 42;
pub const PF_DIVERT: u32 = 44;
pub const PF_MAX: u32 = 44;
pub const NET_RT_DUMP: u32 = 1;
pub const NET_RT_FLAGS: u32 = 2;
pub const NET_RT_IFLIST: u32 = 3;
pub const NET_RT_IFMALIST: u32 = 4;
pub const NET_RT_IFLISTL: u32 = 5;
pub const NET_RT_NHOP: u32 = 6;
pub const NET_RT_NHGRP: u32 = 7;
pub const SOMAXCONN: u32 = 128;
pub const MSG_OOB: u32 = 1;
pub const MSG_PEEK: u32 = 2;
pub const MSG_DONTROUTE: u32 = 4;
pub const MSG_EOR: u32 = 8;
pub const MSG_TRUNC: u32 = 16;
pub const MSG_CTRUNC: u32 = 32;
pub const MSG_WAITALL: u32 = 64;
pub const MSG_DONTWAIT: u32 = 128;
pub const MSG_EOF: u32 = 256;
pub const MSG_NOTIFICATION: u32 = 8192;
pub const MSG_NBIO: u32 = 16384;
pub const MSG_COMPAT: u32 = 32768;
pub const MSG_NOSIGNAL: u32 = 131072;
pub const MSG_CMSG_CLOEXEC: u32 = 262144;
pub const MSG_WAITFORONE: u32 = 524288;
pub const CMGROUP_MAX: u32 = 16;
pub const SCM_RIGHTS: u32 = 1;
pub const SCM_TIMESTAMP: u32 = 2;
pub const SCM_CREDS: u32 = 3;
pub const SCM_BINTIME: u32 = 4;
pub const SCM_REALTIME: u32 = 5;
pub const SCM_MONOTONIC: u32 = 6;
pub const SCM_TIME_INFO: u32 = 7;
pub const SCM_CREDS2: u32 = 8;
pub const ST_INFO_HW: u32 = 1;
pub const ST_INFO_HW_HPREC: u32 = 2;
pub const SHUT_RD: u32 = 0;
pub const SHUT_WR: u32 = 1;
pub const SHUT_RDWR: u32 = 2;
pub const PRU_FLUSH_RD: u32 = 0;
pub const PRU_FLUSH_WR: u32 = 1;
pub const PRU_FLUSH_RDWR: u32 = 2;
pub const SF_NODISKIO: u32 = 1;
pub const SF_MNOWAIT: u32 = 2;
pub const SF_SYNC: u32 = 4;
pub const SF_USER_READAHEAD: u32 = 8;
pub const SF_NOCACHE: u32 = 16;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __int_least16_t = __int16_t;
pub type __int_least32_t = __int32_t;
pub type __int_least64_t = __int64_t;
pub type __intmax_t = __int64_t;
pub type __uint_least8_t = __uint8_t;
pub type __uint_least16_t = __uint16_t;
pub type __uint_least32_t = __uint32_t;
pub type __uint_least64_t = __uint64_t;
pub type __uintmax_t = __uint64_t;
pub type __intptr_t = __int64_t;
pub type __intfptr_t = __int64_t;
pub type __uintptr_t = __uint64_t;
pub type __uintfptr_t = __uint64_t;
pub type __vm_offset_t = __uint64_t;
pub type __vm_size_t = __uint64_t;
pub type __size_t = __uint64_t;
pub type __ssize_t = __int64_t;
pub type __ptrdiff_t = __int64_t;
pub type __clock_t = __int32_t;
pub type __critical_t = __int64_t;
pub type __double_t = f64;
pub type __float_t = f32;
pub type __int_fast8_t = __int32_t;
pub type __int_fast16_t = __int32_t;
pub type __int_fast32_t = __int32_t;
pub type __int_fast64_t = __int64_t;
pub type __register_t = __int64_t;
pub type __segsz_t = __int64_t;
pub type __time_t = __int64_t;
pub type __uint_fast8_t = __uint32_t;
pub type __uint_fast16_t = __uint32_t;
pub type __uint_fast32_t = __uint32_t;
pub type __uint_fast64_t = __uint64_t;
pub type __u_register_t = __uint64_t;
pub type __vm_paddr_t = __uint64_t;
pub type ___wchar_t = ::core::ffi::c_int;
pub type __blksize_t = __int32_t;
pub type __blkcnt_t = __int64_t;
pub type __clockid_t = __int32_t;
pub type __fflags_t = __uint32_t;
pub type __fsblkcnt_t = __uint64_t;
pub type __fsfilcnt_t = __uint64_t;
pub type __gid_t = __uint32_t;
pub type __id_t = __int64_t;
pub type __ino_t = __uint64_t;
pub type __key_t = ::core::ffi::c_long;
pub type __lwpid_t = __int32_t;
pub type __mode_t = __uint16_t;
pub type __accmode_t = ::core::ffi::c_int;
pub type __nl_item = ::core::ffi::c_int;
pub type __nlink_t = __uint64_t;
pub type __off_t = __int64_t;
pub type __off64_t = __int64_t;
pub type __pid_t = __int32_t;
pub type __sbintime_t = __int64_t;
pub type __rlim_t = __int64_t;
pub type __sa_family_t = __uint8_t;
pub type __socklen_t = __uint32_t;
pub type __suseconds_t = ::core::ffi::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __timer {
    _unused: [u8; 0],
}
pub type __timer_t = *mut __timer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mq {
    _unused: [u8; 0],
}
pub type __mqd_t = *mut __mq;
pub type __uid_t = __uint32_t;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __cpuwhich_t = ::core::ffi::c_int;
pub type __cpulevel_t = ::core::ffi::c_int;
pub type __cpusetid_t = ::core::ffi::c_int;
pub type __daddr_t = __int64_t;
pub type __ct_rune_t = ::core::ffi::c_int;
pub type __rune_t = __ct_rune_t;
pub type __wint_t = __ct_rune_t;
pub type __char16_t = __uint_least16_t;
pub type __char32_t = __uint_least32_t;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __max_align_t {
    pub __max_align1: ::core::ffi::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __max_align2: u128,
}
#[test]
fn bindgen_test_layout___max_align_t() {
    const UNINIT: ::core::mem::MaybeUninit<__max_align_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(__max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(__max_align_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__max_align1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__max_align_t),
            "::",
            stringify!(__max_align1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__max_align2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__max_align_t),
            "::",
            stringify!(__max_align2)
        )
    );
}
pub type __dev_t = __uint64_t;
pub type __fixpt_t = __uint32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::core::ffi::c_char; 128usize],
    pub _mbstateL: __int64_t,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::core::mem::MaybeUninit<__mbstate_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __rman_res_t = __uintmax_t;
pub type __va_list = __builtin_va_list;
pub type __gnuc_va_list = __va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kevent {
    pub ident: __uintptr_t,
    pub filter: ::core::ffi::c_short,
    pub flags: ::core::ffi::c_ushort,
    pub fflags: ::core::ffi::c_uint,
    pub data: __int64_t,
    pub udata: *mut ::core::ffi::c_void,
    pub ext: [__uint64_t; 4usize],
}
#[test]
fn bindgen_test_layout_kevent() {
    const UNINIT: ::core::mem::MaybeUninit<kevent> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<kevent>(),
        64usize,
        concat!("Size of: ", stringify!(kevent))
    );
    assert_eq!(
        ::core::mem::align_of::<kevent>(),
        8usize,
        concat!("Alignment of ", stringify!(kevent))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ident) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kevent),
            "::",
            stringify!(ident)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kevent),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(kevent),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fflags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kevent),
            "::",
            stringify!(fflags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kevent),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).udata) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(kevent),
            "::",
            stringify!(udata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ext) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(kevent),
            "::",
            stringify!(ext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct knote {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct klist {
    pub slh_first: *mut knote,
}
#[test]
fn bindgen_test_layout_klist() {
    const UNINIT: ::core::mem::MaybeUninit<klist> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<klist>(),
        8usize,
        concat!("Size of: ", stringify!(klist))
    );
    assert_eq!(
        ::core::mem::align_of::<klist>(),
        8usize,
        concat!("Alignment of ", stringify!(klist))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).slh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(klist),
            "::",
            stringify!(slh_first)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kqueue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kqlist {
    pub tqh_first: *mut kqueue,
    pub tqh_last: *mut *mut kqueue,
}
#[test]
fn bindgen_test_layout_kqlist() {
    const UNINIT: ::core::mem::MaybeUninit<kqlist> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<kqlist>(),
        16usize,
        concat!("Size of: ", stringify!(kqlist))
    );
    assert_eq!(
        ::core::mem::align_of::<kqlist>(),
        8usize,
        concat!("Alignment of ", stringify!(kqlist))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tqh_first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kqlist),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tqh_last) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kqlist),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct knlist {
    pub kl_list: klist,
    pub kl_lock: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
    pub kl_unlock: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
    pub kl_assert_lock: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void, arg2: ::core::ffi::c_int),
    >,
    pub kl_lockarg: *mut ::core::ffi::c_void,
    pub kl_autodestroy: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_knlist() {
    const UNINIT: ::core::mem::MaybeUninit<knlist> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<knlist>(),
        48usize,
        concat!("Size of: ", stringify!(knlist))
    );
    assert_eq!(
        ::core::mem::align_of::<knlist>(),
        8usize,
        concat!("Alignment of ", stringify!(knlist))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kl_list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(knlist),
            "::",
            stringify!(kl_list)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kl_lock) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(knlist),
            "::",
            stringify!(kl_lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kl_unlock) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(knlist),
            "::",
            stringify!(kl_unlock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kl_assert_lock) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(knlist),
            "::",
            stringify!(kl_assert_lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kl_lockarg) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(knlist),
            "::",
            stringify!(kl_lockarg)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kl_autodestroy) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(knlist),
            "::",
            stringify!(kl_autodestroy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    _unused: [u8; 0],
}
extern "C" {
    pub fn kqueue() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn kqueuex(flags: ::core::ffi::c_uint) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn kqueue1(flags: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn kevent(
        kq: ::core::ffi::c_int,
        changelist: *const kevent,
        nchanges: ::core::ffi::c_int,
        eventlist: *mut kevent,
        nevents: ::core::ffi::c_int,
        timeout: *const timespec,
    ) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::core::ffi::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    const UNINIT: ::core::mem::MaybeUninit<iovec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::core::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).iov_base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type gid_t = __gid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type sa_family_t = __sa_family_t;
pub type socklen_t = __socklen_t;
pub type uid_t = __uid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::core::ffi::c_int,
    pub l_linger: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    const UNINIT: ::core::mem::MaybeUninit<linger> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::core::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_onoff) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_linger) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct accept_filter_arg {
    pub af_name: [::core::ffi::c_char; 16usize],
    pub af_arg: [::core::ffi::c_char; 240usize],
}
#[test]
fn bindgen_test_layout_accept_filter_arg() {
    const UNINIT: ::core::mem::MaybeUninit<accept_filter_arg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<accept_filter_arg>(),
        256usize,
        concat!("Size of: ", stringify!(accept_filter_arg))
    );
    assert_eq!(
        ::core::mem::align_of::<accept_filter_arg>(),
        1usize,
        concat!("Alignment of ", stringify!(accept_filter_arg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).af_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(accept_filter_arg),
            "::",
            stringify!(af_name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).af_arg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(accept_filter_arg),
            "::",
            stringify!(af_arg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_len: ::core::ffi::c_uchar,
    pub sa_family: sa_family_t,
    pub sa_data: [::core::ffi::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    const UNINIT: ::core::mem::MaybeUninit<sockaddr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::core::mem::align_of::<sockaddr>(),
        1usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sa_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockproto {
    pub sp_family: ::core::ffi::c_ushort,
    pub sp_protocol: ::core::ffi::c_ushort,
}
#[test]
fn bindgen_test_layout_sockproto() {
    const UNINIT: ::core::mem::MaybeUninit<sockproto> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sockproto>(),
        4usize,
        concat!("Size of: ", stringify!(sockproto))
    );
    assert_eq!(
        ::core::mem::align_of::<sockproto>(),
        2usize,
        concat!("Alignment of ", stringify!(sockproto))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sp_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockproto),
            "::",
            stringify!(sp_family)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sp_protocol) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockproto),
            "::",
            stringify!(sp_protocol)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_len: ::core::ffi::c_uchar,
    pub ss_family: sa_family_t,
    pub __ss_pad1: [::core::ffi::c_char; 6usize],
    pub __ss_align: __int64_t,
    pub __ss_pad2: [::core::ffi::c_char; 112usize],
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    const UNINIT: ::core::mem::MaybeUninit<sockaddr_storage> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::core::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss_family) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__ss_pad1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_pad1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__ss_align) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__ss_pad2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_pad2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::core::ffi::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::core::ffi::c_int,
    pub msg_control: *mut ::core::ffi::c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    const UNINIT: ::core::mem::MaybeUninit<msghdr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<msghdr>(),
        48usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::core::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_namelen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_iov) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_iovlen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_control) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_controllen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsghdr {
    pub cmsg_len: socklen_t,
    pub cmsg_level: ::core::ffi::c_int,
    pub cmsg_type: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    const UNINIT: ::core::mem::MaybeUninit<cmsghdr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cmsghdr>(),
        12usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::core::mem::align_of::<cmsghdr>(),
        4usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmsg_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmsg_level) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmsg_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsgcred {
    pub cmcred_pid: pid_t,
    pub cmcred_uid: uid_t,
    pub cmcred_euid: uid_t,
    pub cmcred_gid: gid_t,
    pub cmcred_ngroups: ::core::ffi::c_short,
    pub cmcred_groups: [gid_t; 16usize],
}
#[test]
fn bindgen_test_layout_cmsgcred() {
    const UNINIT: ::core::mem::MaybeUninit<cmsgcred> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cmsgcred>(),
        84usize,
        concat!("Size of: ", stringify!(cmsgcred))
    );
    assert_eq!(
        ::core::mem::align_of::<cmsgcred>(),
        4usize,
        concat!("Alignment of ", stringify!(cmsgcred))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmcred_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsgcred),
            "::",
            stringify!(cmcred_pid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmcred_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsgcred),
            "::",
            stringify!(cmcred_uid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmcred_euid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsgcred),
            "::",
            stringify!(cmcred_euid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmcred_gid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsgcred),
            "::",
            stringify!(cmcred_gid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmcred_ngroups) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsgcred),
            "::",
            stringify!(cmcred_ngroups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmcred_groups) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsgcred),
            "::",
            stringify!(cmcred_groups)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockcred {
    pub sc_uid: uid_t,
    pub sc_euid: uid_t,
    pub sc_gid: gid_t,
    pub sc_egid: gid_t,
    pub sc_ngroups: ::core::ffi::c_int,
    pub sc_groups: [gid_t; 1usize],
}
#[test]
fn bindgen_test_layout_sockcred() {
    const UNINIT: ::core::mem::MaybeUninit<sockcred> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sockcred>(),
        24usize,
        concat!("Size of: ", stringify!(sockcred))
    );
    assert_eq!(
        ::core::mem::align_of::<sockcred>(),
        4usize,
        concat!("Alignment of ", stringify!(sockcred))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sc_uid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockcred),
            "::",
            stringify!(sc_uid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sc_euid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockcred),
            "::",
            stringify!(sc_euid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sc_gid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockcred),
            "::",
            stringify!(sc_gid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sc_egid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sockcred),
            "::",
            stringify!(sc_egid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sc_ngroups) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sockcred),
            "::",
            stringify!(sc_ngroups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sc_groups) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sockcred),
            "::",
            stringify!(sc_groups)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockcred2 {
    pub sc_version: ::core::ffi::c_int,
    pub sc_pid: pid_t,
    pub sc_uid: uid_t,
    pub sc_euid: uid_t,
    pub sc_gid: gid_t,
    pub sc_egid: gid_t,
    pub sc_ngroups: ::core::ffi::c_int,
    pub sc_groups: [gid_t; 1usize],
}
#[test]
fn bindgen_test_layout_sockcred2() {
    const UNINIT: ::core::mem::MaybeUninit<sockcred2> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sockcred2>(),
        32usize,
        concat!("Size of: ", stringify!(sockcred2))
    );
    assert_eq!(
        ::core::mem::align_of::<sockcred2>(),
        4usize,
        concat!("Alignment of ", stringify!(sockcred2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sc_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockcred2),
            "::",
            stringify!(sc_version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sc_pid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockcred2),
            "::",
            stringify!(sc_pid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sc_uid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockcred2),
            "::",
            stringify!(sc_uid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sc_euid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sockcred2),
            "::",
            stringify!(sc_euid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sc_gid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sockcred2),
            "::",
            stringify!(sc_gid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sc_egid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sockcred2),
            "::",
            stringify!(sc_egid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sc_ngroups) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockcred2),
            "::",
            stringify!(sc_ngroups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sc_groups) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sockcred2),
            "::",
            stringify!(sc_groups)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sock_timestamp_info {
    pub st_info_flags: __uint32_t,
    pub st_info_pad0: __uint32_t,
    pub st_info_rsv: [__uint64_t; 7usize],
}
#[test]
fn bindgen_test_layout_sock_timestamp_info() {
    const UNINIT: ::core::mem::MaybeUninit<sock_timestamp_info> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sock_timestamp_info>(),
        64usize,
        concat!("Size of: ", stringify!(sock_timestamp_info))
    );
    assert_eq!(
        ::core::mem::align_of::<sock_timestamp_info>(),
        8usize,
        concat!("Alignment of ", stringify!(sock_timestamp_info))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_info_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sock_timestamp_info),
            "::",
            stringify!(st_info_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_info_pad0) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sock_timestamp_info),
            "::",
            stringify!(st_info_pad0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_info_rsv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sock_timestamp_info),
            "::",
            stringify!(st_info_rsv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::core::ffi::c_ushort,
    pub sa_data: [::core::ffi::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    const UNINIT: ::core::mem::MaybeUninit<osockaddr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::core::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct omsghdr {
    pub msg_name: *mut ::core::ffi::c_char,
    pub msg_namelen: ::core::ffi::c_int,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::core::ffi::c_int,
    pub msg_accrights: *mut ::core::ffi::c_char,
    pub msg_accrightslen: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_omsghdr() {
    const UNINIT: ::core::mem::MaybeUninit<omsghdr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<omsghdr>(),
        48usize,
        concat!("Size of: ", stringify!(omsghdr))
    );
    assert_eq!(
        ::core::mem::align_of::<omsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(omsghdr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(omsghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_namelen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(omsghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_iov) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(omsghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_iovlen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(omsghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_accrights) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(omsghdr),
            "::",
            stringify!(msg_accrights)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_accrightslen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(omsghdr),
            "::",
            stringify!(msg_accrightslen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sf_hdtr {
    pub headers: *mut iovec,
    pub hdr_cnt: ::core::ffi::c_int,
    pub trailers: *mut iovec,
    pub trl_cnt: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_sf_hdtr() {
    const UNINIT: ::core::mem::MaybeUninit<sf_hdtr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sf_hdtr>(),
        32usize,
        concat!("Size of: ", stringify!(sf_hdtr))
    );
    assert_eq!(
        ::core::mem::align_of::<sf_hdtr>(),
        8usize,
        concat!("Alignment of ", stringify!(sf_hdtr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).headers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(headers)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hdr_cnt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(hdr_cnt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).trailers) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(trailers)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).trl_cnt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sf_hdtr),
            "::",
            stringify!(trl_cnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmsghdr {
    pub msg_hdr: msghdr,
    pub msg_len: isize,
}
#[test]
fn bindgen_test_layout_mmsghdr() {
    const UNINIT: ::core::mem::MaybeUninit<mmsghdr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<mmsghdr>(),
        56usize,
        concat!("Size of: ", stringify!(mmsghdr))
    );
    assert_eq!(
        ::core::mem::align_of::<mmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(mmsghdr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmsghdr),
            "::",
            stringify!(msg_hdr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_len) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mmsghdr),
            "::",
            stringify!(msg_len)
        )
    );
}
extern "C" {
    pub fn accept(
        arg1: ::core::ffi::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn bind(
        arg1: ::core::ffi::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn connect(
        arg1: ::core::ffi::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn accept4(
        arg1: ::core::ffi::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
        arg4: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn bindat(
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: *const sockaddr,
        arg4: socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn connectat(
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: *const sockaddr,
        arg4: socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getpeername(
        arg1: ::core::ffi::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getsockname(
        arg1: ::core::ffi::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getsockopt(
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_int,
        arg4: *mut ::core::ffi::c_void,
        arg5: *mut socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn listen(arg1: ::core::ffi::c_int, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn recv(
        arg1: ::core::ffi::c_int,
        arg2: *mut ::core::ffi::c_void,
        arg3: usize,
        arg4: ::core::ffi::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        arg1: ::core::ffi::c_int,
        arg2: *mut ::core::ffi::c_void,
        arg3: usize,
        arg4: ::core::ffi::c_int,
        arg5: *mut sockaddr,
        arg6: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(arg1: ::core::ffi::c_int, arg2: *mut msghdr, arg3: ::core::ffi::c_int) -> isize;
}
extern "C" {
    pub fn recvmmsg(
        arg1: ::core::ffi::c_int,
        arg2: *mut mmsghdr,
        arg3: usize,
        arg4: ::core::ffi::c_int,
        arg5: *const timespec,
    ) -> isize;
}
extern "C" {
    pub fn send(
        arg1: ::core::ffi::c_int,
        arg2: *const ::core::ffi::c_void,
        arg3: usize,
        arg4: ::core::ffi::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        arg1: ::core::ffi::c_int,
        arg2: *const ::core::ffi::c_void,
        arg3: usize,
        arg4: ::core::ffi::c_int,
        arg5: *const sockaddr,
        arg6: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        arg1: ::core::ffi::c_int,
        arg2: *const msghdr,
        arg3: ::core::ffi::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendfile(
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: off_t,
        arg4: usize,
        arg5: *mut sf_hdtr,
        arg6: *mut off_t,
        arg7: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sendmmsg(
        arg1: ::core::ffi::c_int,
        arg2: *mut mmsghdr,
        arg3: usize,
        arg4: ::core::ffi::c_int,
    ) -> isize;
}
extern "C" {
    pub fn setfib(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setsockopt(
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_int,
        arg4: *const ::core::ffi::c_void,
        arg5: socklen_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn shutdown(arg1: ::core::ffi::c_int, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sockatmark(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn socket(
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn socketpair(
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_int,
        arg4: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::core::ffi::c_uint,
    pub fp_offset: ::core::ffi::c_uint,
    pub overflow_arg_area: *mut ::core::ffi::c_void,
    pub reg_save_area: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::core::mem::MaybeUninit<__va_list_tag> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::core::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
